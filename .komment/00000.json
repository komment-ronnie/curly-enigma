[
  {
    "name": "source.js",
    "path": "source.js",
    "content": {
      "structured": {
        "description": "A WebGL-based miner for cryptographic hashes, specifically designed for mining golden tickets in a proof-of-work system. It utilizes the OpenGL API and shaders to perform the hash calculations on the GPU, allowing for parallel processing of many nonce values at once. The `glminer` function orchestrates the mining process, iterating over nonces and checking for successful hashes against a target value.",
        "items": [
          {
            "id": "c4fd9b92-c4f8-e49f-2a4c-91b2922ab97d",
            "ancestors": [],
            "description": "Throws an error when a WebGL error occurs, providing detailed information about the error and the function that caused it. It takes three parameters: the error code, the name of the function, and any arguments passed to that function.",
            "params": [
              {
                "name": "err",
                "optional": false,
                "type_name": "GLenum",
                "description": "Used to specify an OpenGL error code."
              },
              {
                "name": "funcName",
                "optional": false,
                "type_name": "string",
                "description": "Used to identify the WebGL function causing the error."
              },
              {
                "name": "args",
                "optional": false,
                "type_name": "any[]",
                "description": "Passed to the failed WebGL function call."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "try {\n    WebGLDebugUtils.throwOnGLError(gl.getParameter(gl.ERROR), \"getError\", []);\n} catch (e) {\n    // Handle error\n}\n",
              "description": ""
            },
            "name": "throwOnGLError",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          },
          {
            "id": "0dd74c7e-148b-0387-2848-43a3ec44d7e6",
            "ancestors": [],
            "description": "Initializes a WebGL context and sets up shaders for a program. It creates buffers and uniforms, binds them to the program, and sets their values using arrays of hash values and coefficients. The function prepares the WebGL environment for further processing.",
            "params": [
              {
                "name": "threads",
                "optional": false,
                "type_name": "number",
                "description": "Used to set the width of the canvas."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "meinWebGLStart(5);\n",
              "description": "\nThis will create a canvas element and initialize WebGL with the specified number of threads (5)."
            },
            "name": "meinWebGLStart",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 103,
            "docLength": null
          },
          {
            "id": "f267ca63-f1ea-0d9f-234c-4e5cc93f3b99",
            "ancestors": [],
            "description": "Makes a GET request to the specified URL (`n`) using XMLHttpRequest, and when the request is complete, it calls the provided `callback` function with the response text as an argument.",
            "params": [
              {
                "name": "n",
                "optional": false,
                "type_name": "string",
                "description": "URL of the script to be read."
              },
              {
                "name": "callback",
                "optional": false,
                "type_name": "any",
                "description": "Invoked with the response text after the script has been read."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "readScript('script.js', function(text) {\n    eval(text);\n});\n",
              "description": ""
            },
            "name": "readScript",
            "location": {
              "start": 131,
              "insert": 131,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 9,
            "docLength": null
          },
          {
            "id": "8a516678-0fdf-e8b4-0547-2d7c81b9134d",
            "ancestors": [],
            "description": "Reads two scripts, 'shader-vs.js' and 'shader-fs.js', and assigns their contents to variables `vShaderQuellcode` and `fShaderQuellcode`, respectively. These scripts likely contain vertex and fragment shader code for a graphics application.",
            "params": [],
            "usage": {
              "language": "javascript",
              "code": "onl();\nwebGL.init(vShaderQuellcode, fShaderQuellcode);\n",
              "description": "\n\nNote: The example code assumes that there is a webGL module with `init` method."
            },
            "name": "onl",
            "location": {
              "start": 141,
              "insert": 141,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 9,
            "docLength": null
          },
          {
            "id": "cdde9197-215c-c0bd-7343-f4e6eac8242b",
            "ancestors": [
              "8a516678-0fdf-e8b4-0547-2d7c81b9134d"
            ],
            "description": "Reads and assigns.",
            "name": null,
            "location": {
              "start": 142,
              "insert": 143,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 3,
            "docLength": null
          },
          {
            "id": "1c76bb40-d175-eabb-ba42-891cbfa0a8ab",
            "ancestors": [
              "8a516678-0fdf-e8b4-0547-2d7c81b9134d"
            ],
            "description": "Reads a file and sets its content to variable.",
            "name": null,
            "location": {
              "start": 146,
              "insert": 147,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "higher_order_invocation",
            "length": 3,
            "docLength": null
          },
          {
            "id": "b9c1fdf8-1e38-f688-ee4a-0e056aa10bf7",
            "ancestors": [],
            "description": "Mines for gold in a canvas using WebGL and JavaScript. It submits nonces to a callback function after checking if they are golden hashes within a specified target range. The mining process continues until a maximum nonce value is reached or an event triggers a forced quit.",
            "params": [
              {
                "name": "job",
                "optional": false,
                "type_name": "object",
                "description": "Used for mining cryptocurrency."
              },
              {
                "name": "callback",
                "optional": false,
                "type_name": "(job: object, error?: any) => void",
                "description": "Used to notify about job completion or errors."
              }
            ],
            "returns": {
              "type_name": "Function",
              "description": "The result of calling the `mine` function with the provided job and callback parameters."
            },
            "usage": {
              "language": "javascript",
              "code": "glminer({\n    t: new Date().getTime(),\n    half: [...],\n    data: [...],\n    target: [...]\n}, function(job) {\n    // process job\n});\n",
              "description": ""
            },
            "name": "glminer",
            "location": {
              "start": 151,
              "insert": 151,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 140,
            "docLength": null
          },
          {
            "id": "9289a7c1-61d1-71a7-d54b-7a359a53ae4d",
            "ancestors": [
              "b9c1fdf8-1e38-f688-ee4a-0e056aa10bf7"
            ],
            "description": "Mines for a cryptocurrency by rendering pixels and checking their colors to find valid hashes. It submits found nonces to a callback, reports total hashes periodically, and handles timeouts to prevent starvation.",
            "params": [
              {
                "name": "job",
                "optional": false,
                "type_name": "object",
                "description": "Used to store data related to the current mining operation."
              },
              {
                "name": "callback",
                "optional": false,
                "type_name": "(job: object) => void",
                "description": "Used to submit job results."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "var job = {\n    \"half\": [0, 1],\n    \"data\": [2, 3]\n};\n\nnext_run(job, function(result) {\n    // result processing code here\n});\n",
              "description": ""
            },
            "name": "next_run",
            "location": {
              "start": 154,
              "insert": 154,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 103,
            "docLength": null
          },
          {
            "id": "192bdc62-b3e0-afa8-1d40-eb2ffe33122b",
            "ancestors": [
              "b9c1fdf8-1e38-f688-ee4a-0e056aa10bf7",
              "9289a7c1-61d1-71a7-d54b-7a359a53ae4d"
            ],
            "description": "Processes a mining job by converting its nonce to a uint16 array, updating job data accordingly, concatenating job half and data arrays, encoding the result into a pool string using `toPoolString` method, and then assigning the result as the golden ticket before calling a callback with the updated job.",
            "params": [],
            "usage": {
              "language": "javascript",
              "code": "var job = {nonce: 12345, data: [], half: []};\nsubmit_nonce(job, function(job) {\n    // process golden ticket\n});",
              "description": ""
            },
            "name": "submit_nonce",
            "location": {
              "start": 164,
              "insert": 164,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "function",
            "length": 17,
            "docLength": null
          },
          {
            "id": "c26a62e3-7e55-6cb8-d148-ca68bf0e7f4d",
            "ancestors": [
              "b9c1fdf8-1e38-f688-ee4a-0e056aa10bf7",
              "9289a7c1-61d1-71a7-d54b-7a359a53ae4d"
            ],
            "description": "Calls the `next_run` function with two arguments: `job` and `callback`. This likely schedules a job for execution and registers a callback to handle its outcome. The result is passed back to the caller through the callback, allowing asynchronous processing of tasks.",
            "params": [],
            "usage": {
              "language": "javascript",
              "code": "var job = 'do something';\nc(job, function(data) {\n    // process data\n});\n",
              "description": ""
            },
            "name": "c",
            "location": {
              "start": 249,
              "insert": 249,
              "offset": " ",
              "indent": 16,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          },
          {
            "id": "e286af05-9c22-1cb5-1049-e07e8a4a8107",
            "ancestors": [
              "b9c1fdf8-1e38-f688-ee4a-0e056aa10bf7"
            ],
            "description": "Checks if a message event contains data and a property called 'run'. If either condition is false, it sets a variable `run` to false and logs a message indicating forced quit.",
            "params": [
              {
                "name": "event",
                "optional": false,
                "type_name": "object",
                "description": "Used to receive data from an external source."
              }
            ],
            "usage": {
              "language": "javascript",
              "code": "var event = {data: {run: true}};\nintMessage(event);\n",
              "description": ""
            },
            "name": "intMessage",
            "location": {
              "start": 257,
              "insert": 257,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 7,
            "docLength": null
          },
          {
            "id": "d4794686-34ea-aaa1-6e4f-4b504834e49b",
            "ancestors": [
              "b9c1fdf8-1e38-f688-ee4a-0e056aa10bf7"
            ],
            "description": "Sets uniform variables for a WebGL context with provided data and then initiates a mining process using the `next_run` function, passing the job object and callback as arguments. The result is returned as an integer message.",
            "params": [
              {
                "name": "job",
                "optional": false,
                "type_name": "object",
                "description": "Used to set uniform values for WebGL."
              },
              {
                "name": "callback",
                "optional": false,
                "type_name": "Function",
                "description": "Invoked after completing the mining operation."
              }
            ],
            "returns": {
              "type_name": "object",
              "description": "Referred to as `intMessage`."
            },
            "usage": {
              "language": "javascript",
              "code": "mine({data: [1,2], hash1: [3,4], midstate: [5,6], target: [7,8]}, function(result) {\n    processResult(result);\n})\n",
              "description": "\nPasses."
            },
            "name": "mine",
            "location": {
              "start": 265,
              "insert": 265,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 15,
            "docLength": null
          },
          {
            "id": "4254da4e-f62a-e9b8-9940-f46a1de72c79",
            "ancestors": [
              "b9c1fdf8-1e38-f688-ee4a-0e056aa10bf7"
            ],
            "description": "Checks whether a given hash value is within the target range for a golden hash. It converts both values to unsigned integers, logs a message with their comparison result, and returns true if the hash value is less than or equal to the target value.",
            "params": [
              {
                "name": "hash",
                "optional": false,
                "type_name": "string",
                "description": "32 bytes long."
              },
              {
                "name": "target",
                "optional": false,
                "type_name": "(number|string)[]",
                "description": "8 bytes long."
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "True if the condition `u1 <= u2` is satisfied and false otherwise."
            },
            "usage": {
              "language": "javascript",
              "code": "var hash = '0x1234567890abcdef';\nvar target = '0x876543210fedcba9';\n\nif (is_golden_hash(hash, target)) {\n    alert('Hash is golden');\n} else {\n    alert('Hash is not golden');\n}\n",
              "description": ""
            },
            "name": "is_golden_hash",
            "location": {
              "start": 281,
              "insert": 281,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 7,
            "docLength": null
          }
        ]
      }
    }
  }
]